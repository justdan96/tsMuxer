name: Nightly Releases

on:
  schedule:
    - cron:  '1 1 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    
    outputs:
      status: ${{ steps.check.outputs.status }}
      upload_url: ${{ steps.create.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v2
      name: checkout
    
    - name: nightly-check
      id: check
      shell: bash {0}
      run: |
        ver=$(./.github/workflows/nightly_check.sh)
        echo "::set-output name=status::$?"
        echo "::set-output name=version::${ver}"

    - name: create-release
      id: create
      if: steps.check.outputs.status == 0
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly-${{ steps.check.outputs.version }}
        release_name: Nightly build from ${{ steps.check.outputs.version }}
        prerelease: true
        commitish: ${{ env.GITHUB_SHA }}
    
    - name: obs-trigger
      id: obs
      if: steps.check.outputs.status == 0
      run: ./.github/workflows/obs_trigger.sh
      env:
        OBS_USER: ${{ secrets.OBS_USER }}
        OBS_SECRET: ${{ secrets.OBS_SECRET }}
  
  build-docker:
  
    needs: check
    if: needs.check.outputs.status == 0
  
    runs-on: ubuntu-latest
    
    container:
      image: docker://justdan96/tsmuxer_build:latest
      volumes:
      - /workspace:/github/workspace
    
    steps:
    - uses: actions/checkout@v2
      name: checkout
      
    - run: rm -f bin/.gitkeep
      name: clean-bin-folder
      
    - run: ./rebuild_linux_with_gui_docker.sh
      name: build-for-linux
      
    - run: ./rebuild_mxe_with_gui_docker.sh
      name: build-for-win64
      
    - run: ./rebuild_mxe32_with_gui_docker.sh
      name: build-for-win32
    
    - name: Upload Linux Build
      id: upload-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check.outputs.upload_url }}
        asset_path: ./bin/lnx.zip
        asset_name: lnx.zip
        asset_content_type: application/zip

    - name: Upload Win64 Build
      id: upload-w64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check.outputs.upload_url }}
        asset_path: ./bin/w64.zip
        asset_name: w64.zip
        asset_content_type: application/zip

    - name: Upload Win32 Build
      id: upload-w32
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check.outputs.upload_url }}
        asset_path: ./bin/w32.zip
        asset_name: w32.zip
        asset_content_type: application/zip

  build-macos:
  
    needs: check
    if: needs.check.outputs.status == 0
    
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v2
      name: checkout
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      
    - run: ./build_macos_native.sh
      name: build-for-mac
    
    - name: Upload Mac Build
      id: upload-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check.outputs.upload_url }}
        asset_path: ./build/bin/mac.zip
        asset_name: mac.zip
        asset_content_type: application/zip
